/*
TC = O(N^2)
SC = (1)
*/


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int i=0,low,high,n=nums.length;
        List<List<Integer>> result= new LinkedList<>();
        while(i<n-2){
            if(i== 0 ||(i>0 && nums[i]!=nums[i-1])){
                low=i+1;
                high=n-1;
                while(low<high){
                    int tmp = nums[high]+nums[low]+nums[i];
                    if(tmp==0){
                        result.add(Arrays.asList(nums[i],nums[low],nums[high]));
                        while(low < high && nums[low] == nums[low+1]) low++;
                        while(low < high && nums[high] == nums[high-1]) high--;
                        low++;
                        high--;
                    }else if(tmp>0){
                        high--;
                    }else if(tmp<0){
                        low++;
                    }
                }
            }
            i++;
        }
        return result;
    }
}
